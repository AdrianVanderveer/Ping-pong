

#include "pch.h"
#include "bat.h"
#include "ball.h"
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <SFML\Graphics.hpp>

Bat::Bat(double startingXPos, double startingYPos)
{

	position.x = startingYPos;
	position.y = startingYPos;

	batShape.setSize(sf::Vector2f(50, 5));
	batShape.setPosition(position);

}
FloatRect Bat::getPosition() {
	return batShape.getGlobalBounds();
}

RectangleShape Bat::getShape() {
	return batShape;
}

void Bat::moveLeft() {
	position.x -= batSpeed;
}

void Bat::moveRight() {
	position.x += batSpeed;
}

void Bat::update() {
	batShape.setPosition(position);
}

Ball::Ball(double startingXPos, double startingYPos) {

	position.x = startingXPos;
	position.y = startingYPos;

	ballShape.setSize(sf::Vector2f(10, 10));
	ballShape.setPosition(position);
}//end Ball::Ball

FloatRect Ball::getPosition() {
	return ballShape.getGlobalBounds();
}

RectangleShape Ball::getShape() {
	return ballShape;
}

double Ball::getXVelocity() {
	return xVelocity;
}

void Ball::reboundSides() {
	xVelocity = -xVelocity;
}

void Ball::reboundBatOrTop() {
	position.y -= (yVelocity * 30);
	yVelocity = -yVelocity;
}

void Ball::hitBottom() {
	position.y = 1;
	position.x = 500;
}

void Ball::update() {
	position.x += xVelocity;
	position.y += yVelocity;

	ballShape.setPosition(position);
}

int main()
{
	int windowWidth = 1024;
	int windowHeight = 768;

	int score = 0;
	int lives = 3;

	sf::RenderWindow window(sf::VideoMode(windowWidth, windowHeight), "Ping Pong");

	//create players bat
	Bat bat((windowWidth / 2), (windowHeight - 20));
	//create ball
	Ball ball((windowWidth / 2), 1);

	//create a Text object
	Text hud;
	Font font;
	font.loadFromFile("game_over.ttf");
	//set the font for the hud
	hud.setFont(font);
	//increase hud size
	hud.setCharacterSize(75);
	//set hud color
	hud.setFillColor(sf::Color::Green);

	while (window.isOpen()) {

		//handle player input here

		Event event;
		while (window.pollEvent(event)) {

			//if window is closed
			if (event.type == Event::Closed) {
				window.close();
			}

		}//end while(window.pollEvent(event))

			//if left is pressed move left
			if (Keyboard::isKeyPressed(Keyboard::Left)) {
				bat.moveLeft();
			}

			//if right is pressed move right
			else if (Keyboard::isKeyPressed(Keyboard::Right)) {
				bat.moveRight();
			}
			//if escape is pressed close window
			else if (Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
				window.close();
			}

			//if ball hits the bottom
			if (ball.getPosition().top > windowHeight) {
				//reverse ball direction
				ball.hitBottom();

				lives--;
				//if player runs out of lives reset
				if (lives < 1) {
					score = 0;
					lives = 3;
				}
			}
			//if ball hits the top of the screen
			if (ball.getPosition().top < 0) {
				ball.reboundBatOrTop();
				score++;
			}
			//if ball hits sides rebound the ball
			if (ball.getPosition().left < 0 || ball.getPosition().left + 10 > windowWidth) {
				ball.reboundSides();
			}
			//rebound if ball hits the paddle
			if (ball.getPosition().intersects(bat.getPosition())) {
				ball.reboundBatOrTop();
			}
			
			ball.update();
			bat.update();

			std::stringstream ss;

			ss << "Score: " << score << "	Lives: " << lives;
			hud.setString(ss.str());

			//cear the last frame
			window.clear(Color(26, 128, 182, 255));

			//draw objects
			window.draw(bat.getShape());
			window.draw(ball.getShape());

			window.draw(hud);
			//show what was drawn
			window.display();

		
	}//end while(window.isOpen())

	return 0;

}
